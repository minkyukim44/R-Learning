install.packages("foreign")
install.packages("https://cran.r-project.org/src/contrib/Archive/foreign/foreign_0.8-79.tar.gz", repos = NULL, type = "source")
install.packages("installr")
library("installer")
library("installr")
check.for.updates.R()
install.R
install.R()
version
install.packages("rJava")
install.packages("memoise")
install.packages("https://cran.r-project.org/src/contrib/Archive/KoNLP/KoNLP_0.80.2.tar.gz", repose = NULL, type = "source", INSTALL_opts = c('--no-lock'))
install.packages("https://cran.r-project.org/src/contrib/Archive/KoNLP/KoNLP_0.80.1.tar.gz", repose = NULL, type = "source", INSTALL_opts = c('--no-lock'))
install.packages("https://cran.r-project.org/src/contrib/Archive/KoNLP/KoNLP_0.80.0.tar.gz", repose = NULL, type = "source", INSTALL_opts = c('--no-lock'))
install.packages("https://cran.r-project.org/src/contrib/Archive/KoNLP/KoNLP_0.76.tar.gz", repose = NULL, type = "source", INSTALL_opts = c('--no-lock'))
install.packages("https://cran.r-project.org/src/contrib/Archive/KoNLP/KoNLP_0.76.8.tar.gz", repose = NULL, type = "source", INSTALL_opts = c('--no-lock'))
install.packages("https://cran.r-project.org/src/contrib/Archive/KoNLP/KoNLP_0.75.tar.gz", repose = NULL, type = "source", INSTALL_opts = c('--no-lock'))
install.packages("KoNLP")
install.packages("KoNLP")
library(KoNLP)
install.packages("KoNLP")
install.packages("KoNLP")
find_rtools(T)
install.packages('devtools')
devtools::install_github('haven-jeon/KoNLP')
library(KoNLP)
devtools::install_github('haven-jeon/KoNLP')
install.packages("KoNLP")
devtools::install_github('haven-jeon/KoNLP')
install.packages('devtools')
install.packages('devtools')
install.packages('devtools')
devtools::install_github('haven-jeon/KoNLP')
install.packages(c("survival", "sys"))
devtools::install_github('haven-jeon/KoNLP')
devtools::install_github('haven-jeon/KoNLP')
devtools::install_github('haven-jeon/KoNLP')
devtools::install_github('haven-jeon/KoNLP')
devtools::install_github('haven-jeon/KoNLP', dependencies = TRUE, INSTALL_opts = '--no-lock')
install.packages("rJava")
install.packages("memoise")
install.packages('devtools')
devtools::install_github('haven-jeon/KoNLP', dependencies = TRUE, INSTALL_opts = '--no-lock')
devtools::install_github('haven-jeon/KoNLP', dependencies = TRUE, INSTALL_opts = '--no-lock')
require(devtools)
install_version("backports", version = "1.1.8")
install.packages("rJava")
R.version
R.version()
R.version
library(rJava)
Sys.setenv(JAVA_HOME = "C:\\Program Files\\Java\\jdk-14.0.2")
devtools::install_github('haven-jeon/KoNLP', dependencies = TRUE, INSTALL_opts = '--no-lock')
devtools::install_github('haven-jeon/KoNLP', dependencies = TRUE, INSTALL_opts = '--no-lock')
# prepare a dataset
install.packages("stringi")
devtools::install_github("cardiomoon/kormaps2014")
library(kormaps2014)
# prepare a dataset
str(changeCode(korepop1))
# prepare a dataset
str(changeCode(korpop1))
library(dplyr)
korpop1 <- rename(korpop1, pop = 총인구_명, name = 행정구역별_읍면동)
str(changecode(kormap1))
str(changeCode(kormap1))
library(ggiraphExtra)
# make a Choropleth
ggChoropleth(data = korpop1,
aes(fill = pop, map_id = code, tooltip = name),
map = kormap1,
interactive = T)
# prepare a map
library(ggplot2)
# make a Choropleth
ggChoropleth(data = korpop1,
aes(fill = pop, map_id = code, tooltip = name),
map = kormap1,
interactive = T)
# make a Choropleth
options(encoding = "UTF-8")
ggChoropleth(data = korpop1,
aes(fill = pop, map_id = code, tooltip = name),
map = kormap1,
interactive = T)
options(encoding = "CP949")
ggChoropleth(data = korpop1,
aes(fill = pop, map_id = code, tooltip = name),
map = kormap1,
interactive = T)
# make a Choropleth
options(encoding = "UTF-8")
ggChoropleth(data = korpop1,
aes(fill = pop, map_id = code, tooltip = name),
map = kormap1,
interactive = T)
korpop1$name <- iconv(korpop1$name, to = "UTF-8")
ggChoropleth(data = korpop1,
aes(fill = pop, map_id = code, tooltip = name),
map = kormap1,
interactive = T)
library(kormaps2014)
korpop1 <- rename(korpop1, pop = 총인구_명, name = 행정구역별_읍면동)
# prepare a dataset
str(changeCode(korpop1))    # change encoding utf-8 to cp949
korpop1 <- rename(korpop1, pop = 총인구_명, name = 행정구역별_읍면동)
library(kormaps2014)
# prepare a dataset
str(changeCode(korpop1))    # change encoding utf-8 to cp949
korpop1$name <- iconv(korpop1$name, to = "CP949")
# prepare a dataset
str(changeCode(korpop1))    # change encoding utf-8 to cp949
# prepare packages
install.packages("plothy")
# prepare packages
install.packages("plotly")
library(plotly)
# plot a graph
library(ggplot2)
p <- ggplot(data = mpg, aes(x = displ, y = hwy, col = drv)) + geom_point()
ggplotly(p)
p1 <- ggplot(data = diamonds, aes(x = cut, fill = clarity)) + geom_bar(position = "dodge")
ggplotly(p1)
# prepare packages
install.packages("dygraph")
# prepare packages
install.packages("dygraphs")
library(dygraphs)
economics <- ggplot2::economics
head(economics)
library(xts)
eco <- xts(economics$unemploy, order.by = economics$data)
eco <- xts(economics$unemploy, order.by = economics$date)
head(eco)
dygraph(eco)
dygraph(eco) %>% dyRangeSelector()
# plot various graphs
eco_a <- xts(economics$psavert, order.by = economics$date)
eco_b <- xts(economics$unemploy/1000, order.by = economics$date)
eco2 <- cbind(eco_a, eco_b)
head(eco2)
colnames(eco2) <- c("psavert", "unemploy")
head(eco2)
dygraph(eco2) %>% dyRangeSelector()
setwd("C:/Users/user/Desktop/Programming/R-programming/Quant Investment")
url.aapl = "http://www.quandl.com/api/v3/datasets/WIKI/AAPL/data.csv?api_key=xw3NU3xLUZ7vZgrz5QnG"
data.aapl = read.csv(url.aapl)
head(data.aapl)
data.aapl
# getting data from Yahoo finance
install.packages(quantmod)
# getting data from Yahoo finance
install.package(quantmod)
# getting data from Yahoo finance
library(quantmod)
# getting data from Yahoo finance
install.packages("quantmod")
library(quantmod)
getSymbols('AAPL')
head(AAPL)
chart_Series(Ad(AAPL))
typeof(AAPL)
data = getSymbol('AAPL',
from = '2000-01-01', to = '2018-12-31',
auto.assign = FALSE)
data = getSymbols('AAPL',
from = '2000-01-01', to = '2018-12-31',
auto.assign = FALSE)
head(data)
chart_Series(Ad(AAPL))
chart_Series(Ad(data))
data = getSymbols('AAPL',
from = '2000-01-01', to = '2020-08-31',
auto.assign = FALSE)
chart_Series(Ad(data))
ticker = c('FB', 'NVDA')
getSymbols(ticket)
getSymbols(ticker)
head(FB)
head(NVDA)
getSymbols('TSLA')
getSymbols(TSLA)
head(TSLA)
chart_Series(Ad(TSLA))
# getting Korean stock market data
getSymbols('005930.KS',
from = '2000-01-01', to = '2018-12-31')
tail(Ad('005930.KS'))
tail(Ad(005930.KS))
tail(Ad(`005930.KS`))
tail(Cl(`005930.KS`))
chart_Series(Cl(`005930.KS`))
getSymbols("068760.KQ",
from = '2000-01-01', to = '2018-12-31')
tail(Cl(`068760.KQ`))
getSymbols("068760.KQ",
from = '2000-01-01', to = '2018-01-31')
tail(Cl(`068760.KQ`))
# getting FRED data
getSymbols('DGS10', src='FRED')
chart_Series(DGS10)
getSymbols('DEXKOUS', src='FRED')
tail(DEXKOUS)
## web crawling
install.packages("rvest")
install.packages("httr")
library(rvest)
library(httr)
url = paste0('https://finance.naver.com/news/news_list.nhn?mode=LSS2D&section_id=101&section_id2=258')
data = GET(url)
print(data)
data_title = data %>%
read_html(encoding = 'EUC-KR') %>%
html_nodes('dl') %>%
html_nodes('.articleSubject') %>%
html_nodes('a') %>%
html_attr('title')
print(data_title)
data_summary = data %>%
read_html(encoding = 'EUC-KR') %>%
html_nodes('dl') %>%
html_nodes('.articleSummary')
print(data_summary)
typeof(data_summary)
View(data_summary)
data_summary[[1]]
print(data_summary[1])
print(data_summary[[1]])
print(data_summary[[2]])
print(data_summary[[3]])
print(data_summary[1])
data_summary[1]
data_summary = data %>%
read_html(encoding = 'EUC-KR') %>%
html_nodes('dl') %>%
html_nodes(.,'.articleSummary')
print(data_summary)
data_summary = data %>%
read_html(encoding = 'EUC-KR') %>%
html_nodes('dl') %>%
html_attr(.,'.articleSummary')
print(data_summary)
data_summary = data %>%
read_html(encoding = 'EUC-KR') %>%
html_nodes('dl') %>%
html_attr('.articleSummary')
print(data_summary)
data_summary = data %>%
read_html(encoding = 'EUC-KR') %>%
html_nodes('dl') %>%
html_nodes('.articleSummary') %>%
html_text()
print(data_summary)
typeof(data_summary)
library(stringr)
str_replace_all(data_summary, "[\r\n]", "")
str_replace_all(data_summary, "[\r\n\t]", "")
print(data_summary)
data_summary <- str_replace_all(data_summary, "[\r\n\t]", "")
print(data_summary)
typeof(data_summary)
write.csv(data_summary)
write.csv(data_summary, file = "data_summary")
