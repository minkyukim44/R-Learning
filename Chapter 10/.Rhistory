install.packages("foreign")
install.packages("https://cran.r-project.org/src/contrib/Archive/foreign/foreign_0.8-79.tar.gz", repos = NULL, type = "source")
install.packages("installr")
library("installer")
library("installr")
check.for.updates.R()
install.R
install.R()
version
install.packages("rJava")
install.packages("memoise")
install.packages("https://cran.r-project.org/src/contrib/Archive/KoNLP/KoNLP_0.80.2.tar.gz", repose = NULL, type = "source", INSTALL_opts = c('--no-lock'))
install.packages("https://cran.r-project.org/src/contrib/Archive/KoNLP/KoNLP_0.80.1.tar.gz", repose = NULL, type = "source", INSTALL_opts = c('--no-lock'))
install.packages("https://cran.r-project.org/src/contrib/Archive/KoNLP/KoNLP_0.80.0.tar.gz", repose = NULL, type = "source", INSTALL_opts = c('--no-lock'))
install.packages("https://cran.r-project.org/src/contrib/Archive/KoNLP/KoNLP_0.76.tar.gz", repose = NULL, type = "source", INSTALL_opts = c('--no-lock'))
install.packages("https://cran.r-project.org/src/contrib/Archive/KoNLP/KoNLP_0.76.8.tar.gz", repose = NULL, type = "source", INSTALL_opts = c('--no-lock'))
install.packages("https://cran.r-project.org/src/contrib/Archive/KoNLP/KoNLP_0.75.tar.gz", repose = NULL, type = "source", INSTALL_opts = c('--no-lock'))
install.packages("KoNLP")
install.packages("KoNLP")
library(KoNLP)
install.packages("KoNLP")
install.packages("KoNLP")
find_rtools(T)
install.packages('devtools')
devtools::install_github('haven-jeon/KoNLP')
library(KoNLP)
devtools::install_github('haven-jeon/KoNLP')
install.packages("KoNLP")
devtools::install_github('haven-jeon/KoNLP')
install.packages('devtools')
install.packages('devtools')
install.packages('devtools')
devtools::install_github('haven-jeon/KoNLP')
install.packages(c("survival", "sys"))
devtools::install_github('haven-jeon/KoNLP')
devtools::install_github('haven-jeon/KoNLP')
devtools::install_github('haven-jeon/KoNLP')
devtools::install_github('haven-jeon/KoNLP')
devtools::install_github('haven-jeon/KoNLP', dependencies = TRUE, INSTALL_opts = '--no-lock')
install.packages("rJava")
install.packages("memoise")
install.packages('devtools')
devtools::install_github('haven-jeon/KoNLP', dependencies = TRUE, INSTALL_opts = '--no-lock')
devtools::install_github('haven-jeon/KoNLP', dependencies = TRUE, INSTALL_opts = '--no-lock')
require(devtools)
install_version("backports", version = "1.1.8")
install.packages("rJava")
R.version
R.version()
R.version
library(rJava)
Sys.setenv(JAVA_HOME = "C:\\Program Files\\Java\\jdk-14.0.2")
devtools::install_github('haven-jeon/KoNLP', dependencies = TRUE, INSTALL_opts = '--no-lock')
devtools::install_github('haven-jeon/KoNLP', dependencies = TRUE, INSTALL_opts = '--no-lock')
library(rJava)
library(KoNLP)
library(dplyr)
# remove special characters
install.packages("stringr")
install.packages("stringr")
library(stringr)
# load textfile
txt <- readLines("hiphop.txt")
setwd("C:/Users/user/Desktop/Programming/R-programming/Chapter 10")
# load textfile
txt <- readLines("hiphop.txt")
txt <- str_remove_all(txt,"\\W", " ")
txt <- str_replace_all(txt,"\\W", " ")
# extract nouns
extractNoun("대한민국의 영토는 한반도와 그 부속도서로 한다")
nouns <- extractNoun(txt)
wordcount <- table(unlist(nouns))
df_word <- as.data.frame(wordcount, stringsAsFactors = F)
df_word <- rename(df_word, word = Var1,
freq = Freq)
df_word <- filter(df_word, nchar(word) >= 2)
top_20 <- df_word %>%
arrange(desc(freq)) %>%
head(20)
top_20
# make a word cloud
install.packages("wordcloud")
library(wordcloud)
library(RColorBrewer)
pal <- brewer.pal(8, "Dark2")
set.seed(1234)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 2,
max.words = 200,
random.order = F,
rot.per = 1,
scale = c(4, 0.3),
colors = pal)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 2,
max.words = 200,
random.order = F,
rot.per = 2,
scale = c(4, 0.3),
colors = pal)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 2,
max.words = 200,
random.order = F,
rot.per = 3,
scale = c(4, 0.3),
colors = pal)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 2,
max.words = 200,
random.order = F,
rot.per = 0,
scale = c(4, 0.3),
colors = pal)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 2,
max.words = 200,
random.order = F,
rot.per = 1,
scale = c(4, 0.3),
colors = pal)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 2,
max.words = 200,
random.order = F,
rot.per = 0,
scale = c(4, 0.3),
colors = pal)
R CMD INSTALL --help
INSTALL --help
devtools::install_github() --help
?devtools::install_github()
?--no-multiarch
pal1 <- brewer.pal(9, "Blue")[5:9]
pal1 <- brewer.pal(9, "Blues")[5:9]
set.sead(1234)
set.seed(1234)
wordcloud(wrods = dr_word$word,
freq = df_word$freq,
min.freq = 2,
max.words = 200,
random.order = F,
rot.per = 1,
scale = c(4, 0.3),
colors = pal)
wordcloud(words = dr_word$word,
freq = df_word$freq,
min.freq = 2,
max.words = 200,
random.order = F,
rot.per = 1,
scale = c(4, 0.3),
colors = pal)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 2,
max.words = 200,
random.order = F,
rot.per = 1,
scale = c(4, 0.3),
colors = pal)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 2,
max.words = 200,
random.order = F,
rot.per = 1,
scale = c(4, 0.3),
colors = pal1)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 2,
max.words = 200,
random.order = F,
rot.per = 0,
scale = c(4, 0.3),
colors = pal1)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 2,
max.words = 200,
random.order = F,
rot.per = 1,
scale = c(4, 0.3),
colors = pal1)
wordcloud(words = df_word$word,     # works
freq = df_word$freq,      # frequency
min.freq = 2,             # minimum frequency of words
max.words = 200,          # the number of words
random.order = F,         # show the word of the high frequency at the center
rot.per = 0,              # rotate words
scale = c(4, 0.3),        # the range of the word size
colors = pal)             # color
pal <- brewer.pal(8, "Dark2")       # generate a list of colors
set.seed(1234)                      # fix random numbers
wordcloud(words = df_word$word,     # works
freq = df_word$freq,      # frequency
min.freq = 2,             # minimum frequency of words
max.words = 200,          # the number of words
random.order = F,         # show the word of the high frequency at the center
rot.per = 0,              # rotate words
scale = c(4, 0.3),        # the range of the word size
colors = pal)             # color
wordcloud(words = df_word$word,     # works
freq = df_word$freq,      # frequency
min.freq = 2,             # minimum frequency of words
max.words = 200,          # the number of words
random.order = F,         # show the word of the high frequency at the center
rot.per = 1,              # rotate words
scale = c(4, 0.3),        # the range of the word size
colors = pal)             # color
wordcloud(words = df_word$word,     # works
freq = df_word$freq,      # frequency
min.freq = 2,             # minimum frequency of words
max.words = 200,          # the number of words
random.order = F,         # show the word of the high frequency at the center
rot.per = .1,             # rotate words
scale = c(4, 0.3),        # the range of the word size
colors = pal)             # color
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 2,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(4, 0.3),
colors = pal1)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 2,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(4, 0.3),
colors = pal1)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 2,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(4, 0.3),
colors = pal1)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 2,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(4, 0.3),
colors = pal1)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 2,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(4, 0.3),
colors = pal1)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 2,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(4, 0.3),
colors = pal1)
## Twitter text mining
# load data
twitter <- read.csv("twitter.csv",
header = T,
stringsAsFactors = F,
fileEncoding = "UTF-8")
# rename
twitter <- rename(twitter,
no = 번호,
id = 계정이름,
date = 작성일,
tw = 내용)
View(twitter)
# remove special characters
twitter$tw <- str_replace_all(twitter, "\\W", " ")
# remove special characters
twitter$tw <- str_replace_all(twitter$tw, "\\W", " ")
# remove special characters
twitter$tw <- str_replace_all(twitter$tw, "\\W", " ")
# remove special characters
twitter$tw <- str_replace_all(twitter$tw, "\\W", " ")
head(twitter$tw)
# make a frequency table
nouns <- extractNoun(twitter$tw)
setwd("C:/Users/user/Desktop/Programming/R-programming/Chapter 10")
wordcount <- table(unlist(nouns))
df_word <- as.data.frame(wordcount, stringsAsFactors = F)
df_word <- rename(df_word,
word = Var1,
freq = Freq)
head(df_word)
df_word <- filter(df_word, nchar(word) >= 2)
head(df_word)
top20 <- df_word %>%
arrange(desc(freq)) %>%
head(20)
top20
# make a frequency bar graph
library(ggplot2)
order <- arrange(top20, freq)$word
ggplot(data = top20, aes(x - word, y = freq)) +
ylim(0, 2500) +
geom_col() +
coord_flip() +
scale_x_discrete(limit = order) +
geom_text(Aes(label = freq), hjust = -0.3)
ggplot(data = top20, aes(x - word, y = freq)) +
ylim(0, 2500) +
geom_col() +
coord_flip() +
scale_x_discrete(limit = order) +
geom_text(aes(label = freq), hjust = -0.3)
ggplot(data = top20, aes(x = word, y = freq)) +
ylim(0, 2500) +
geom_col() +
coord_flip() +
scale_x_discrete(limit = order) +
geom_text(aes(label = freq), hjust = -0.3)
pal2 <- brewer.pal(8, "Dark2")
set.seed(1234)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 10,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(6, 0.2),
colors = pal2)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 10,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(5, 0.2),
colors = pal2)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 10,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(5, 0.4),
colors = pal2)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 10,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(4, 0.4),
colors = pal2)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 10,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(5, 0.4),
colors = pal2)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 20,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(5, 0.4),
colors = pal2)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 50,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(5, 0.4),
colors = pal2)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 100,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(5, 0.4),
colors = pal2)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 50,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(5, 0.4),
colors = pal2)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 50,
max.words = 300,
random.order = F,
rot.per = .1,
scale = c(5, 0.4),
colors = pal2)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 50,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(5, 0.1),
colors = pal2)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 50,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(5, 1),
colors = pal2)
scale = c(5, 0.45,
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 50,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(5, 0.45),
colors = pal2)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 50,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(5, 0.45),
colors = pal2)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 50,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(5, 0.45),
colors = pal2)
pal3 <- brewer.pal(9, "Blues")[5:9]
set.seed(1234)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 10,
max.word = 200,
random.order = F,
rot.per = .1,
scale = c(6, 0.2),
colors = pal3)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 50,
max.word = 200,
random.order = F,
rot.per = .1,
scale = c(5, 0.5),
colors = pal3)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 50,
max.word = 200,
random.order = F,
rot.per = .1,
scale = c(5, 0.45),
colors = pal3)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 50,
max.word = 200,
random.order = F,
rot.per = .1,
scale = c(5, 0.4),
colors = pal3)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 50,
max.word = 200,
random.order = F,
rot.per = .1,
scale = c(4, 0.4),
colors = pal3)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 50,
max.word = 200,
random.order = T,
rot.per = .1,
scale = c(4, 0.4),
colors = pal3)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 50,
max.word = 200,
random.order = F,
rot.per = .1,
scale = c(4, 0.4),
colors = pal3)
