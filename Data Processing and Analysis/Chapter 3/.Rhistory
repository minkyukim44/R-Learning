currentPageSize = '15',
pageIndex = '1',
orderMode = '0',
OrderStat = 'D',
forward = 'todaydisclosure_sub',
chose = 'S',
todayFlag = 'Y',
selDate = '2018-12-28'
))
data = read_html(data) %>%
html_table(fill = TRUE) %>%
.[[1]]
data = read_html(data) %>%
html_table(fill = TRUE) %>%
.[[1]]
Sys.setlocale("LC_ALL", "English")  # set language in English
url = 'https://kind.krx.co.kr/disclosure/todaydisclosure.do'
data = POST(url, body =
list(
method = 'searchTodayDisclosureSub',
currentPageSize = '15',
pageIndex = '1',
orderMode = '0',
OrderStat = 'D',
forward = 'todaydisclosure_sub',
chose = 'S',
todayFlag = 'Y',
selDate = '2018-12-28'
))
data = read_html(data) %>%
html_table(fill = TRUE) %>%
.[[1]]
Sys.setlocale("LC_ALL", "Korean")
print(tail(data))
print(head(data))
Sys.setlocale("LC_ALL", "English")  # set language in English
url = 'https://kind.krx.co.kr/disclosure/todaydisclosure.do'
data = POST(url, body =
list(
method = 'searchTodayDisclosureSub',
currentPageSize = '15',
pageIndex = '1',
orderMode = '0',
OrderStat = 'D',
forward = 'todaydisclosure_sub',
chose = 'S',
todayFlag = 'N',
selDate = '2018-12-28'
))
data = read_html(data) %>%
html_table(fill = TRUE) %>%
.[[1]]
Sys.setlocale("LC_ALL", "Korean")
print(head(data))
Sys.setlocale("LC_ALL", "English")  # set language in English
url = 'https://kind.krx.co.kr/disclosure/todaydisclosure.do'
data = POST(url, body =
list(
method = 'searchTodayDisclosureSub',
currentPageSize = '100',
pageIndex = '1',
orderMode = '0',
OrderStat = 'D',
forward = 'todaydisclosure_sub',
chose = 'S',
todayFlag = 'N',
selDate = '2018-12-28'
))
data = read_html(data) %>%
html_table(fill = TRUE) %>%
.[[1]]
Sys.setlocale("LC_ALL", "Korean")
print(head(data))
print(tail(data))
Sys.setlocale("LC_ALL", "English")  # set language in English
url = 'https://kind.krx.co.kr/disclosure/todaydisclosure.do'
data = POST(url, body =
list(
method = 'searchTodayDisclosureSub',
currentPageSize = '100',
pageIndex = '1',
orderMode = '0',
orderStat = 'D',
forward = 'todaydisclosure_sub',
chose = 'S',
todayFlag = 'N',
selDate = '2018-12-28'
))
data = read_html(data) %>%
html_table(fill = TRUE) %>%
.[[1]]
Sys.setlocale("LC_ALL", "Korean")
print(head(data))
View(data)
Sys.setlocale("LC_ALL", "English")  # set language in English
url = 'https://kind.krx.co.kr/disclosure/todaydisclosure.do'
data = POST(url, body =
list(
method = 'searchTodayDisclosureSub',
currentPageSize = '100',
pageIndex = '1',
orderMode = '0',
orderStat = 'D',
forward = 'todaydisclosure_sub',
chose = 'S',
todayFlag = 'Y',
selDate = '2018-12-28'
))
data = read_html(data) %>%
html_table(fill = TRUE) %>%
.[[1]]
Sys.setlocale("LC_ALL", "Korean")
print(head(data))
print(head(data))
print(head(data))
setwd("C:/Users/user/Desktop/Programming/R-programming/Data Processing and Analysis/Chapter 3")
if (TRUE) {
print("TRUE")
print("Hello")
} else {
print("FALSE")
print("world")
}
## Condition Statement
# if-statement
if (FALSE) {
print("TRUE")
print("Hello")
} else {
print("FALSE")
print("world")
}
## Condition Statement
# if-statement
if (TRUE) {
print("TRUE")
print("Hello")
} else {
print("FALSE")
print("world")
}
x <- c(1,2,3,4,5)
ifelse(x %% 2 == 0, "even", "odd")
## Condition Statement
# if-statement
x <- c(TRUE, FALSE, TRUE, FALSE)
if (x) {
print("TRUE")
print("Hello")
} else {
print("FALSE")
print("world")
}
print(i)
for (i in 1:10){
print(i)
}
# repeating statement
for (i in 1:10){
print(i)
}
i <- 1
while(i <=10){
print(i)
i <- i+1
}
i <- 0
while(i <= 9){
i <- i+1
if(i %% 2 != 0){
next
}
print(i)
}
i<- 1
repeat{
print(i)
if (i >= 10){
break
}
i <- i + 1
}
## Operation
1:5*2+1
# vector computation
x <- c(1,2,3,4,5)
x+1
x + x
x == x
x == c(1,2,3,5,5)
c(T,T,T) & c(T,F,T)
sum(x)
mean(x)
median(x)
(d <- data.frame(x = c(1,2,3,4,5), y = c("a","b","c","d","e")))
d[c(T,F,T,F,T)]
d[c(TRUE,FALSE,TRUE,FALSE,TRUE)]
d[c(TRUE,FALSE,TRUE,FALSE,TRUE),]
d[c(T,F,T,F,T), ]
d[d$x %% 2 == 0, ]
# NA
NA + T
NA + 1
sum(c(1,2,3,NA))
sum(c(1,2,3,NA), na.rm = TRUE)
(x <- data.frame(a = c(1,2,3), b = c("a",NA,"c"), c = c("a","b",NA)))
na.fail(x)
na.omit(x)
na.exclude(x)
na.pass(x)
df <- data.frame(x = 1:5, y = seq(2,10,2))
df[3,2] = NA
df
resid(lm(y ~ x, data = dt, na.action = na.omit))
resid(lm(y ~ x, data = df, na.action = na.omit))
resid(lm(y ~ x, data = df, na.action = na.exclude))
resid(lm(y ~ x, data = df, na.action = na.exclude))     # show a result with the row with NA
## Function
fibo <- function(n){
if (n == 1 || n == 2){
return(1)
}
return(fibo(n - 1) + fibo(n - 2))
}
fibo(1)
fibo(2)
fibo(3)
fibo(5)
fibo(100)
fibo(20)
fibo(30)
fibo(40)
print(y)
f <- function(x,y){
print(x)
print(y)
}
f(1,2)
f(2,1)
f(y = 2, x = 1)
# variable length factor
f <- function(...){
args <- list(...)
for (a in args){
print(a)
}
}
f('3','4')
f(3,4)
g <- function(z,...){
print(z)
f(...)
}
g(1,2,3)
# nested function
f <- function(x,y){
print(x)
g <- function(y){
print(y)
}
g(y)
}
f(1,2)
f <- function(x1){
return(function(x2){
return(x1 + x2)
})
}
g <- f(1)
g
g(2)
f(!)
f(1)
g2 <- f(2)
g2(x)
g2(2)
## Scope
n <- 1
f <- function(){
print(n)
}
f()
n <- 2
f()
n <- 100
f <- function(){
n <- 1
print(n)
}
f()
ls()
rm(ls())
rm(list = ls())
print(n)
f <- function(){
print(n)
}
f()
rm(list = ls())     # remove all objects in the memory
f <- function(){
n <- 1
}
f()
n
n <- 100
print(n)
f <- function(n){
print(n)
}
f(1)
f <- function(x){
a <- 2
g <- function(y){
print(y + a)
}
g(x)
}
f(1)
a <- 100
f <- function(x)
f <- function(x){
g <- function(y){
print(y + a)
}
g(x)
}
f <- function(x){
g <- function(y){
print(y + a)
}
g(x)
}
g(1)
f(1)
f <- function(){
a <- 1
g <- function(){
a <- 2
print(a)
}
g()
print(a)
}
f()
b <- 0
f <- function(){
a <- 1
g <- function(){
a <<- 2
b <<- 2
print(a)
print(b)
}
g()
print(a)
print(b)
}
f()
## Pass by Value
f <- function(df2){
df2$a <- c(1,2,3)
}
df <- data.frame(a = c(4,5,6))
f(df)
df
(f(df))
f <- function(df){
df$a <- c(1,2,3)
return(df)
}
df <- data.frame(a = c(4,5,6))
df <- f(df)
df
## Immutable Object
a <- list()
a
print(a)
tracemem(a)
a$b <- c(1,2,3)
untracemem(a)
v <- 1:1000
tracemem(v)
for (i in 1:1000){
v[i] <- v[i] + 1
}
print(v)
untracemem(v)
v <- 1:1000
tracemem(v)
v <- v + 1
untracemem(v)
rm(list = ls())
gc()
v <- 1:99999999
for (i in 1:99999999){
for (j in 1:99999999){
v[j] <- v[j] + 1
}
}
## Module Pattern
# queue (first in first out)
q <- c()
q_size <- 0
enqueue <- function(data) {
q <<- c(q, data)
q_size <<- q_size + 1
}
dequeue <- function() {
first <- q[1]
q <<- q[-1]
q_size <<- q_size - 1
return(first)
}
size <- function() {
return(q_size)
}
enqueue(1)
enqueue(3)
enqueue(5)
print(size_q())
print(size())
print(dequeue())
print(dequeue())
print(dequeue())
print(size())
enqueue(1)
q <- c(q, 5)
dequeue()
dequeue()
size()
queue <- function(){
q <- c()
q_size <- 0
}
queue <- function(){
enqueue <- function(data){
q <<- c(q, data)
q_size <<- q_size + 1
}
size <- function() {
return(q_size)
}
queue <- function(){
q <- c()
q_size <- 0
enqueue <- function(data){
q <<- c(q, data)
q_size <<- q_size + 1
}
dequeue <- function() {
first <- q[1]
q <<- q[-1]
q_size <<- q_size - 1
return(first)
}
size <- function() {
return(q_size)
}
return(list(enqueue = enqueue, dequeue = dequeue, size = size)
}
queue <- function(){
q <- c()
q_size <- 0
enqueue <- function(data){
q <<- c(q, data)
q_size <<- q_size + 1
}
dequeue <- function() {
first <- q[1]
q <<- q[-1]
q_size <<- q_size - 1
return(first)
}
size <- function() {
return(q_size)
}
return(list(enqueue = enqueue, dequeue = dequeue, size = size)
}
queue <- function(){
q <- c()
q_size <- 0
enqueue <- function(data){
q <<- c(q, data)
q_size <<- q_size + 1
}
dequeue <- function() {
first <- q[1]
q <<- q[-1]
q_size <<- q_size - 1
return(first)
}
size <- function() {
return(q_size)
}
return(list(enqueue = enqueue, dequeue = dequeue, size = size))
}
q <- queue()
q
q$enqueue(1)
q$enqueue(3)
q$size()
q$dequeue()
q$dequeue()
q$size()
r <- queue()
q$enqueue((1))
r$size()
r$enqueue(3)
q$dequeue()
r$dequeue()
q$size()
r$size()
