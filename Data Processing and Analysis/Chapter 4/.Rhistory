install.packages("foreign")
install.packages("https://cran.r-project.org/src/contrib/Archive/foreign/foreign_0.8-79.tar.gz", repos = NULL, type = "source")
install.packages("installr")
library("installer")
library("installr")
check.for.updates.R()
install.R
install.R()
version
install.packages("rJava")
install.packages("memoise")
install.packages("https://cran.r-project.org/src/contrib/Archive/KoNLP/KoNLP_0.80.2.tar.gz", repose = NULL, type = "source", INSTALL_opts = c('--no-lock'))
install.packages("https://cran.r-project.org/src/contrib/Archive/KoNLP/KoNLP_0.80.1.tar.gz", repose = NULL, type = "source", INSTALL_opts = c('--no-lock'))
install.packages("https://cran.r-project.org/src/contrib/Archive/KoNLP/KoNLP_0.80.0.tar.gz", repose = NULL, type = "source", INSTALL_opts = c('--no-lock'))
install.packages("https://cran.r-project.org/src/contrib/Archive/KoNLP/KoNLP_0.76.tar.gz", repose = NULL, type = "source", INSTALL_opts = c('--no-lock'))
install.packages("https://cran.r-project.org/src/contrib/Archive/KoNLP/KoNLP_0.76.8.tar.gz", repose = NULL, type = "source", INSTALL_opts = c('--no-lock'))
install.packages("https://cran.r-project.org/src/contrib/Archive/KoNLP/KoNLP_0.75.tar.gz", repose = NULL, type = "source", INSTALL_opts = c('--no-lock'))
install.packages("KoNLP")
install.packages("KoNLP")
library(KoNLP)
install.packages("KoNLP")
install.packages("KoNLP")
find_rtools(T)
install.packages('devtools')
devtools::install_github('haven-jeon/KoNLP')
library(KoNLP)
devtools::install_github('haven-jeon/KoNLP')
install.packages("KoNLP")
devtools::install_github('haven-jeon/KoNLP')
install.packages('devtools')
install.packages('devtools')
install.packages('devtools')
devtools::install_github('haven-jeon/KoNLP')
install.packages(c("survival", "sys"))
devtools::install_github('haven-jeon/KoNLP')
devtools::install_github('haven-jeon/KoNLP')
devtools::install_github('haven-jeon/KoNLP')
devtools::install_github('haven-jeon/KoNLP')
devtools::install_github('haven-jeon/KoNLP', dependencies = TRUE, INSTALL_opts = '--no-lock')
install.packages("rJava")
install.packages("memoise")
install.packages('devtools')
devtools::install_github('haven-jeon/KoNLP', dependencies = TRUE, INSTALL_opts = '--no-lock')
devtools::install_github('haven-jeon/KoNLP', dependencies = TRUE, INSTALL_opts = '--no-lock')
require(devtools)
install_version("backports", version = "1.1.8")
install.packages("rJava")
R.version
R.version()
R.version
library(rJava)
Sys.setenv(JAVA_HOME = "C:\\Program Files\\Java\\jdk-14.0.2")
devtools::install_github('haven-jeon/KoNLP', dependencies = TRUE, INSTALL_opts = '--no-lock')
devtools::install_github('haven-jeon/KoNLP', dependencies = TRUE, INSTALL_opts = '--no-lock')
# prepare a dataset
install.packages("stringi")
devtools::install_github("cardiomoon/kormaps2014")
library(kormaps2014)
# prepare a dataset
str(changeCode(korepop1))
# prepare a dataset
str(changeCode(korpop1))
library(dplyr)
korpop1 <- rename(korpop1, pop = 총인구_명, name = 행정구역별_읍면동)
str(changecode(kormap1))
str(changeCode(kormap1))
library(ggiraphExtra)
# make a Choropleth
ggChoropleth(data = korpop1,
aes(fill = pop, map_id = code, tooltip = name),
map = kormap1,
interactive = T)
# prepare a map
library(ggplot2)
# make a Choropleth
ggChoropleth(data = korpop1,
aes(fill = pop, map_id = code, tooltip = name),
map = kormap1,
interactive = T)
# make a Choropleth
options(encoding = "UTF-8")
ggChoropleth(data = korpop1,
aes(fill = pop, map_id = code, tooltip = name),
map = kormap1,
interactive = T)
options(encoding = "CP949")
ggChoropleth(data = korpop1,
aes(fill = pop, map_id = code, tooltip = name),
map = kormap1,
interactive = T)
# make a Choropleth
options(encoding = "UTF-8")
ggChoropleth(data = korpop1,
aes(fill = pop, map_id = code, tooltip = name),
map = kormap1,
interactive = T)
korpop1$name <- iconv(korpop1$name, to = "UTF-8")
ggChoropleth(data = korpop1,
aes(fill = pop, map_id = code, tooltip = name),
map = kormap1,
interactive = T)
library(kormaps2014)
korpop1 <- rename(korpop1, pop = 총인구_명, name = 행정구역별_읍면동)
# prepare a dataset
str(changeCode(korpop1))    # change encoding utf-8 to cp949
korpop1 <- rename(korpop1, pop = 총인구_명, name = 행정구역별_읍면동)
library(kormaps2014)
# prepare a dataset
str(changeCode(korpop1))    # change encoding utf-8 to cp949
korpop1$name <- iconv(korpop1$name, to = "CP949")
# prepare a dataset
str(changeCode(korpop1))    # change encoding utf-8 to cp949
# prepare packages
install.packages("plothy")
# prepare packages
install.packages("plotly")
library(plotly)
# plot a graph
library(ggplot2)
p <- ggplot(data = mpg, aes(x = displ, y = hwy, col = drv)) + geom_point()
ggplotly(p)
p1 <- ggplot(data = diamonds, aes(x = cut, fill = clarity)) + geom_bar(position = "dodge")
ggplotly(p1)
# prepare packages
install.packages("dygraph")
# prepare packages
install.packages("dygraphs")
library(dygraphs)
economics <- ggplot2::economics
head(economics)
library(xts)
eco <- xts(economics$unemploy, order.by = economics$data)
eco <- xts(economics$unemploy, order.by = economics$date)
head(eco)
dygraph(eco)
dygraph(eco) %>% dyRangeSelector()
# plot various graphs
eco_a <- xts(economics$psavert, order.by = economics$date)
eco_b <- xts(economics$unemploy/1000, order.by = economics$date)
eco2 <- cbind(eco_a, eco_b)
head(eco2)
colnames(eco2) <- c("psavert", "unemploy")
head(eco2)
dygraph(eco2) %>% dyRangeSelector()
##
library(httr)
library(rvest)
Sys.setlocale("LC_ALL", "English")
url = 'https://kind.krx.co.kr/disclosure/todaydisclosure.do'
data = POST(url, body =
list(
method = 'searchTodayDisclosureSub',
currentPageSize = '15',
pageIndex = 'l',
orderMode = '0',
OrderStat = 'D',
forward = 'todaydisclosure_sub',
chose = 'S',
todayFlag = 'Y',
selDate = '2018-12-28'
))
data = read_html(data) %>%
html_table(fill = TRUE) %>%
.[[1]]
Sys.setlocale("LC_ALL", "Korean")
print(head(data))
print(tail(data))
data = POST(url, body =
list(
method = 'searchTodayDisclosureSub',
currentPageSize = '15',
pageIndex = '1',
orderMode = '0',
OrderStat = 'D',
forward = 'todaydisclosure_sub',
chose = 'S',
todayFlag = 'Y',
selDate = '2018-12-28'
))
data = read_html(data) %>%
html_table(fill = TRUE) %>%
.[[1]]
data = read_html(data) %>%
html_table(fill = TRUE) %>%
.[[1]]
Sys.setlocale("LC_ALL", "English")  # set language in English
url = 'https://kind.krx.co.kr/disclosure/todaydisclosure.do'
data = POST(url, body =
list(
method = 'searchTodayDisclosureSub',
currentPageSize = '15',
pageIndex = '1',
orderMode = '0',
OrderStat = 'D',
forward = 'todaydisclosure_sub',
chose = 'S',
todayFlag = 'Y',
selDate = '2018-12-28'
))
data = read_html(data) %>%
html_table(fill = TRUE) %>%
.[[1]]
Sys.setlocale("LC_ALL", "Korean")
print(tail(data))
print(head(data))
Sys.setlocale("LC_ALL", "English")  # set language in English
url = 'https://kind.krx.co.kr/disclosure/todaydisclosure.do'
data = POST(url, body =
list(
method = 'searchTodayDisclosureSub',
currentPageSize = '15',
pageIndex = '1',
orderMode = '0',
OrderStat = 'D',
forward = 'todaydisclosure_sub',
chose = 'S',
todayFlag = 'N',
selDate = '2018-12-28'
))
data = read_html(data) %>%
html_table(fill = TRUE) %>%
.[[1]]
Sys.setlocale("LC_ALL", "Korean")
print(head(data))
Sys.setlocale("LC_ALL", "English")  # set language in English
url = 'https://kind.krx.co.kr/disclosure/todaydisclosure.do'
data = POST(url, body =
list(
method = 'searchTodayDisclosureSub',
currentPageSize = '100',
pageIndex = '1',
orderMode = '0',
OrderStat = 'D',
forward = 'todaydisclosure_sub',
chose = 'S',
todayFlag = 'N',
selDate = '2018-12-28'
))
data = read_html(data) %>%
html_table(fill = TRUE) %>%
.[[1]]
Sys.setlocale("LC_ALL", "Korean")
print(head(data))
print(tail(data))
Sys.setlocale("LC_ALL", "English")  # set language in English
url = 'https://kind.krx.co.kr/disclosure/todaydisclosure.do'
data = POST(url, body =
list(
method = 'searchTodayDisclosureSub',
currentPageSize = '100',
pageIndex = '1',
orderMode = '0',
orderStat = 'D',
forward = 'todaydisclosure_sub',
chose = 'S',
todayFlag = 'N',
selDate = '2018-12-28'
))
data = read_html(data) %>%
html_table(fill = TRUE) %>%
.[[1]]
Sys.setlocale("LC_ALL", "Korean")
print(head(data))
View(data)
Sys.setlocale("LC_ALL", "English")  # set language in English
url = 'https://kind.krx.co.kr/disclosure/todaydisclosure.do'
data = POST(url, body =
list(
method = 'searchTodayDisclosureSub',
currentPageSize = '100',
pageIndex = '1',
orderMode = '0',
orderStat = 'D',
forward = 'todaydisclosure_sub',
chose = 'S',
todayFlag = 'Y',
selDate = '2018-12-28'
))
data = read_html(data) %>%
html_table(fill = TRUE) %>%
.[[1]]
Sys.setlocale("LC_ALL", "Korean")
print(head(data))
print(head(data))
print(head(data))
setwd("C:/Users/user/Desktop/Programming/R-programming/Data Processing and Analysis/Chapter 4")
?do.call
# sapply() return in a vector or a data frame
lapply(iris[, 1:4], mean)
sapply(iris[, 1:4], mean)
class(sapply(iris[, 1:4], mean))
# sapply() return in a vector or a data frame
class(lapply(iris[, 1:4], mean))
x <- sapply(iris[, 1:4], mean)
as.data.frame(x)
as.data.frame(t(x))
sapply(iris,clas)
sapply(iris,class)
y <- sapply(iris[, 1:4], function(x){x >3})
class(y)
head(y)
# tapply() apply a function for each group
tapply(1:10, rep(1, 10), sum)
tapply(1:10, 1:19 %% 2, sum)
tapply(1:10, 1:10 %% 2, sum)
tapply(iris$Sepal.Length, iris$Species, mean)
m <- matrix(1:8, ncol = 2, dimnames = list(c("spring","summer","fall","winter"), c("male","female")))
m
tapply(m, list(c(1,1,2,2,1,1,2,2),c(1,1,1,1,2,2,2,2,)), sum)
tapply(m, list(c(1,1,2,2,1,1,2,2),c(1,1,1,1,2,2,2,2)), sum)
# mapply()
rnorm(10,0,1)
mapply(rnorm, c(1,2,3), c(0, 10, 100), c(1,1,1))
mapply(mean, iris[, 1:4])
## doBy package
install.packages("doBy")
library(doBy)
summary(iris)
quantile(iris$Sepal.Length)
quantile(iris$Sepal.Length, seq(0, 1, by = 0.1))
# summaryBy
summaryBy(Sepal.width + Sepal.Length ~ Species, iris)
# summaryBy
summaryBy(Sepal.Width + Sepal.Length ~ Species, iris)
?summaryBy
# summaryBy
summaryBy(Sepal.Width + Sepal.Length ~ Species, iris, FUN = length)
# summaryBy
summaryBy(Sepal.Width + Sepal.Length ~ Species, iris, FUN = var)
>var
?var
# summaryBy
summaryBy(Sepal.Width + Sepal.Length ~ Species, iris, FUN = c(mean,sd,var))
# orderBy
order(iris$Sepal.Length)
# orderBy
order(iris$Sepal.Width)
iris[order(iris$Sepal.Width),]
iris[order(iris$Sepal.Width, decreasing = TRUE),]
iris[order(iris$Sepal.Width),]
iris[order(iris$Sepal.Width, iris$Sepal.Width),]
iris[order(iris$Sepal.Width, iris$Petal.Width),]
orderBy(~ Sepal.Width, iris)
?orderBy
orderBy(~ Species + Sepal.Width, iris)
# sampleBy
sample(1:10, 5)
sample(1:10, 5, replace = T)
sample(1:10, 5, replace = T)
sample(1:10,10)
iris[sample(NROW(iris), NROW(iris))]
iris[sample(NROW(iris), NROW(iris)),]
NROW(iris)
sample(150,150)
sampleBy(~ Species, frac = 0.1, data = iris)
